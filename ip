Question #1
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
class Car:

    def __init__(self,
                 length=2.3,
                 velocity=5,
                 x_pos_init=0., y_pos_init=0., pose_init=0.):
        self.__length = length
        self.__velocity = velocity
        self.__x = x_pos_init
        self.__y = y_pos_init
        self.__pose = pose_init

    def move(self, steering_angle, dt):
        # This method computes the position and orientation (pose)
        # of the car after time `dt` starting from its current
        # position and orientation by solving an IVP

        def bicycle_model(_t, z):
            x = z[0]
            y = z[1]
            theta = z[2]
            return [self.__velocity * np.cos(theta),
                    self.__velocity * np.sin(theta),
                    self.__velocity * np.tan(steering_angle)
                        / self.__length]

        sol = solve_ivp(bicycle_model,
                        [0, dt],
                        [self.__x, self.__y, self.__pose],
                        t_eval=np.linspace(0,dt,1000))

        self.__x = sol.y[0, -1]
        self.__y = sol.y[1, -1]
        self.__pose = sol.y[2, -1]

        return sol

    def y(self):
        return self.__y

theta_init = 5              # In Degree
current_angle = -2          # Minus sign indicates that the stearing wheel is rotated clockwise
time = 50                    # Total time the simulation runs (In seconds)
car = Car(y_pos_init=0.3, pose_init = np.deg2rad(theta_init))
sol = car.move(steering_angle = np.deg2rad(current_angle), dt = time)
time = sol.t
x_trajectory = sol.y[0]
y_trajectory = sol.y[1]
pose_trajectory = np.rad2deg(sol.y[2])
plt.figure("Time Vs X-trajectory")
plt.plot(time, x_trajectory)
plt.title("Time Vs X-trajectory")
plt.xlabel("Time")
plt.ylabel("X-trajectory")
plt.grid()
plt.show()
plt.figure("Time Vs Y-trajectory")
plt.plot(time, y_trajectory)
plt.title("Time Vs Y-trajectory")
plt.xlabel("Time")
plt.ylabel("Y-trajectory")
plt.grid()
plt.show()
plt.figure("X-trajectory Vs Y-trajectory")
plt.plot(time, pose_trajectory)
plt.title("Time Vs pose-trajectory")
plt.xlabel("Time")
plt.ylabel("Pose-trajectory")
plt.grid()
plt.show()
plt.plot(x_trajectory, y_trajectory)
plt.title("X-trajectory Vs Y-trajectory")
plt.xlabel("X-trajectory")
plt.ylabel("Y-trajectory")
plt.grid()
plt.show()

Question #2
P Controller
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt


class PidController:
    """PidController
    Documentation goes here
    """

    def __init__(self, kp, ki, kd, ts):
        """Documentation goes here

        :param kp: proportional gain
        :param ki: integral gain
        :param kd:
        :param ts:
        """
        self.__kp = kp
        self.__kd = kd / ts  # discrete-time Kd
        self.__ki = ki * ts
        self.__previous_error = None
        self.__error_sum = 0.

    def control(self, y, set_point=0.):
        """Documentation goes here

        :param y:
        :param set_point:
        :return:
        """
        error = set_point - y  # compute the control error
        steering_action = self.__kp * error  # P controller

        # D component:
        if self.__previous_error is not None:
            error_diff = error - self.__previous_error
            steering_action += self.__kd * error_diff

        # I component:
        #steering_action = self.__ki * self.__error_sum
        #self.__error_sum += error
        self.__previous_error = error
        return steering_action


class Car:

    def __init__(self,
                 length=2.3,
                 velocity=5,
                 x_pos_init=0., y_pos_init=0., pose_init=0.):
        self.__length = length
        self.__velocity = velocity
        self.__x = x_pos_init
        self.__y = y_pos_init
        self.__pose = pose_init
        self.x_trajectory = None
        self.time = None

    def move(self, steering_angle = 0., dt = 0.):
        # This method computes the position and orientation (pose)
        # of the car after time `dt` starting from its current
        # position and orientation by solving an IVP

        def bicycle_model(_t, z):
            x = z[0]
            y = z[1]
            theta = z[2]
            return [self.__velocity * np.cos(theta),
                    self.__velocity * np.sin(theta),
                    self.__velocity * np.tan(steering_angle)
                    / self.__length]

        sol = solve_ivp(bicycle_model,
                        [0, dt],
                        [self.__x, self.__y, self.__pose],
                        t_eval=np.linspace(0,dt,1000))
        self.x_trajectory = sol.y[0]
        self.time = sol.t

        self.__x = sol.y[0, -1]
        self.__y = sol.y[1, -1]
        self.__pose = sol.y[2, -1]


    def x(self):
        return self.__x
    def y(self):
        return self.__y
    def pose(self):
        return self.__pose

S_Frequency = 40
t_sampling = 1 / S_Frequency
for a in [0.2, 0.5, 0.9]:
    if a == 0.2:
        color = 'tab:blue'
    elif a == 0.5:
        color = 'tab:orange'
    elif a == 0.9:
        color = 'tab:blue'
    car = Car(y_pos_init=0.3, pose_init = np.deg2rad(5))

    pid = PidController(kp=a, kd=0., ki=0., ts=t_sampling)

    n_sim_points = 500
    x_cache = np.array([car.x()], dtype=float)
    y_cache = np.array([car.y()], dtype=float)
    pose_cache = np.array([car.pose()], dtype=float)
    for i in range(n_sim_points):
        u = pid.control(car.y())
        car.move(u, t_sampling)
        x_cache = np.append(x_cache, car.x())
        y_cache = np.append(y_cache, car.y())
        pose_cache = np.append(pose_cache, car.pose())

    t_span = t_sampling * np.arange(n_sim_points + 1)

    fig, axs = plt.subplots(2, 2)

    axs[0, 0].plot(x_cache, y_cache, color =color)
    axs[0, 0].set_title('X-trajectory Vs Y-trajectory')
    axs[0, 0].set(xlabel= 'X-trajectory', ylabel='Y-trajectory' )
    axs[0, 1].plot(t_span, y_cache,color =color)
    axs[0, 1].set_title('Time Vs Y-trajectory')
    axs[0, 1].set(xlabel= 'Time', ylabel='Y-trajectory')
    axs[1, 0].plot(t_span, np.rad2deg(pose_cache),color =color)
    axs[1, 0].set_title('Time Vs Theta')
    axs[1, 0].set(xlabel= 'Time', ylabel='Pose-trajectory')
    axs[1, 1].plot(t_span, x_cache,color =color)
    axs[1, 1].set_title('Time Vs Theta')
    axs[1, 1].set(xlabel= 'Time', ylabel='X-trajectory')
plt.show()
PD Controller
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt


class PidController:
    """PidController
    Documentation goes here
    """

    def __init__(self, kp, ki, kd, ts):
        """Documentation goes here

        :param kp: proportional gain
        :param ki: integral gain
        :param kd:
        :param ts:
        """
        self.__kp = kp
        self.__kd = kd / ts  # discrete-time Kd
        self.__ki = ki * ts
        self.__previous_error = None
        self.__error_sum = 0.

    def control(self, y, set_point=0.):
        """Documentation goes here

        :param y:
        :param set_point:
        :return:
        """
        error = set_point - y  # compute the control error
        steering_action = self.__kp * error  # P controller

        # D component:
        if self.__previous_error is not None:
            error_diff = error - self.__previous_error
            steering_action += self.__kd * error_diff

        # I component:
        #steering_action = self.__ki * self.__error_sum
        #self.__error_sum += error
        self.__previous_error = error
        return steering_action


class Car:

    def __init__(self,
                 length=2.3,
                 velocity=5,
                 x_pos_init=0., y_pos_init=0., pose_init=0.):
        self.__length = length
        self.__velocity = velocity
        self.__x = x_pos_init
        self.__y = y_pos_init
        self.__pose = pose_init
        self.x_trajectory = None
        self.time = None

    def move(self, steering_angle = 0., dt = 0.):
        # This method computes the position and orientation (pose)
        # of the car after time `dt` starting from its current
        # position and orientation by solving an IVP

        def bicycle_model(_t, z):
            x = z[0]
            y = z[1]
            theta = z[2]
            return [self.__velocity * np.cos(theta),
                    self.__velocity * np.sin(theta),
                    self.__velocity * np.tan(steering_angle)
                    / self.__length]

        sol = solve_ivp(bicycle_model,
                        [0, dt],
                        [self.__x, self.__y, self.__pose],
                        t_eval=np.linspace(0,dt,1000))
        self.x_trajectory = sol.y[0]
        self.time = sol.t

        self.__x = sol.y[0, -1]
        self.__y = sol.y[1, -1]
        self.__pose = sol.y[2, -1]


    def x(self):
        return self.__x
    def y(self):
        return self.__y
    def pose(self):
        return self.__pose

S_Frequency = 40
t_sampling = 1 / S_Frequency
for a in [0.1, 0.3, 0.6]:
    if a == 0.1:
        color = 'tab:blue'
    elif a == 0.3:
        color = 'tab:orange'
    elif a == 0.6:
        color = 'tab:blue'
    car = Car(y_pos_init=0.3, pose_init = np.deg2rad(5))

    pid = PidController(kp=0.5, kd=a, ki=0., ts=t_sampling)

    n_sim_points = 500
    x_cache = np.array([car.x()], dtype=float)
    y_cache = np.array([car.y()], dtype=float)
    pose_cache = np.array([car.pose()], dtype=float)
    for i in range(n_sim_points):
        u = pid.control(car.y())
        car.move(u, t_sampling)
        x_cache = np.append(x_cache, car.x())
        y_cache = np.append(y_cache, car.y())
        pose_cache = np.append(pose_cache, car.pose())

    t_span = t_sampling * np.arange(n_sim_points + 1)

    fig, axs = plt.subplots(2, 2)

    axs[0, 0].plot(x_cache, y_cache, color =color)
    axs[0, 0].set_title('X-trajectory Vs Y-trajectory')
    axs[0, 0].set(xlabel= 'X-trajectory', ylabel='Y-trajectory' )
    axs[0, 1].plot(t_span, y_cache,color =color)
    axs[0, 1].set_title('Time Vs Y-trajectory')
    axs[0, 1].set(xlabel= 'Time', ylabel='Y-trajectory')
    axs[1, 0].plot(t_span, np.rad2deg(pose_cache),color =color)
    axs[1, 0].set_title('Time Vs Theta')
    axs[1, 0].set(xlabel= 'Time', ylabel='Pose-trajectory')
    axs[1, 1].plot(t_span, x_cache,color =color)
    axs[1, 1].set_title('Time Vs Theta')
    axs[1, 1].set(xlabel= 'Time', ylabel='X-trajectory')
plt.show()
PID Controller
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt


class PidController:
    """PidController
    Documentation goes here
    """

    def __init__(self, kp, ki, kd, ts):
        """Documentation goes here

        :param kp: proportional gain
        :param ki: integral gain
        :param kd:
        :param ts:
        """
        self.__kp = kp
        self.__kd = kd / ts  # discrete-time Kd
        self.__ki = ki * ts
        self.__previous_error = None
        self.__error_sum = 0.

    def control(self, y, set_point=0.):
        """Documentation goes here

        :param y:
        :param set_point:
        :return:
        """
        error = set_point - y  # compute the control error
        steering_action = self.__kp * error  # P controller

        # D component:
        if self.__previous_error is not None:
            error_diff = error - self.__previous_error
            steering_action += self.__kd * error_diff

        # I component:
        steering_action = self.__ki * self.__error_sum
        self.__error_sum += error
        self.__previous_error = error
        return steering_action


class Car:

    def __init__(self,
                 length=2.3,
                 velocity=5,
                 x_pos_init=0., y_pos_init=0., pose_init=0.):
        self.__length = length
        self.__velocity = velocity
        self.__x = x_pos_init
        self.__y = y_pos_init
        self.__pose = pose_init
        self.x_trajectory = None
        self.time = None



    def move(self, steering_angle = 0., dt = 0., w=0.):
        # This method computes the position and orientation (pose)
        # of the car after time `dt` starting from its current
        # position and orientation by solving an IVP

        def bicycle_model(_t, z):
            x = z[0]
            y = z[1]
            theta = z[2]
            return [self.__velocity * np.cos(theta),
                    self.__velocity * np.sin(theta),
                    self.__velocity * np.tan(steering_angle + w)
                    / self.__length]

        sol = solve_ivp(bicycle_model,
                        [0, dt],
                        [self.__x, self.__y, self.__pose],
                        t_eval=np.linspace(0,dt,1000))
        self.x_trajectory = sol.y[0]
        self.time = sol.t

        self.__x = sol.y[0, -1]
        self.__y = sol.y[1, -1]
        self.__pose = sol.y[2, -1]


    def x(self):
        return self.__x
    def y(self):
        return self.__y
    def pose(self):
        return self.__pose

S_Frequency = 40
t_sampling = 1 / S_Frequency
for a in [0.01, 0.03, 0.06]:
    if a == 0.01:
        color = 'tab:blue'
    elif a == 0.03:
        color = 'tab:orange'
    elif a == 0.06:
        color = 'tab:blue'
    car = Car(y_pos_init=0.3)

    pid = PidController(kp=0.5, kd=0.01, ki=a, ts=t_sampling, )

    n_sim_points = 200
    x_cache = np.array([car.x()], dtype=float)
    y_cache = np.array([car.y()], dtype=float)
    pose_cache = np.array([car.pose()], dtype=float)
    for i in range(n_sim_points):
        u = pid.control(car.y())
        car.move(u, t_sampling, w=np.deg2rad(1))
        x_cache = np.append(x_cache, car.x())
        y_cache = np.append(y_cache, car.y())
        pose_cache = np.append(pose_cache, car.pose())

    t_span = t_sampling * np.arange(n_sim_points + 1)

    fig, axs = plt.subplots(2, 2)

    axs[0, 0].plot(x_cache, y_cache, color =color)
    axs[0, 0].set_title('X-trajectory Vs Y-trajectory')
    axs[0, 0].set(xlabel= 'X-trajectory', ylabel='Y-trajectory' )
    axs[0, 1].plot(t_span, y_cache,color =color)
    axs[0, 1].set_title('Time Vs Y-trajectory')
    axs[0, 1].set(xlabel= 'Time', ylabel='Y-trajectory')
    axs[1, 0].plot(t_span, np.rad2deg(pose_cache),color =color)
    axs[1, 0].set_title('Time Vs Theta')
    axs[1, 0].set(xlabel= 'Time', ylabel='Pose-trajectory')
    axs[1, 1].plot(t_span, x_cache,color =color)
    axs[1, 1].set_title('Time Vs Theta')
    axs[1, 1].set(xlabel= 'Time', ylabel='X-trajectory')
plt.show()
